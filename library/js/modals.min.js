const NeonModalFactory = (function(){
    function NeonModalClass(content_element, referring_element) {
          
        let frag = document.createDocumentFragment;
        let container = document.createElement('div');
        let content = document.createElement('div');
        //let svg_blob='<svg id="neon_modal_balls" data-name="neon_modal_balls" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 222.9 397.98"><style>.neon_modal_colorfill{fill:#ff970b}</style><title>NeonModal</title><path class="neon_modal_colorfill" d="M118,119A119,119,0,0,0,.94,0L.1,238A119,119,0,0,0,118,119Z" transform="translate(-0.1 -0.02)" /><circle class="neon_modal_colorfill" cx="182.9" cy="167.98" r="40" /><circle class="neon_modal_colorfill" cx="130.9" cy="316.98" r="81" /></svg>';
        let body = document.getElementsByTagName('body')[0];
        //let yposition = window.scrollY + referring_element.getBoundingClientRect().top;
        let yposition = window.scrollY 
        //change color of background balls if there's a color key
        if(referring_element.hasAttribute('data-modal-color-key')){
            let the_hex = referring_element.dataset.modalColorKey;
            if(the_hex.length == 6 && the_hex.substring(0,1) !== '#') the_hex = '#'+the_hex;
            let is_hex = /^#[0-9A-F]{6}$/i.test(the_hex);
            if(is_hex){
                let colorFindRegEx = /fill:#ff970b/g;
                let colorReplace = 'fill:'+the_hex;
                //svg_blob = svg_blob.replace(colorFindRegEx, colorReplace);
            }
              
        }
        // add classes 
        container.classList.add('neon-modal');
        content.classList.add('neon-modal-content');
        if(referring_element.hasAttribute('data-modal-type')){
            content.classList.add( referring_element.dataset.modalType );
            if(referring_element.dataset.modalType == 'colorguide'){
                content.classList.add('transparent');
            }
        }
        if(referring_element.hasAttribute('data-modal-size')){
            content.classList.add( referring_element.dataset.modalSize );
        }

        //add content
        content.appendChild(content_element);
        container.appendChild(content);
        //body.classList.add('modal-open');
        body.appendChild(container);
        //lock the scroll
        body.style.position = 'fixed';
        body.style.top = window.scrollY+'px';
        prep_s3_video(content);
        prep_vimeo(content);
        // close modal event listener
        container.addEventListener('click', function(e){
            e.preventDefault();
            let body = document.getElementsByTagName('BODY')[0];
            var modal = document.getElementsByClassName('neon-modal')[0];
            if(resp !== null) resp.innerHTML = '';
            body.classList.remove('modal-open');
            body.setAttribute('style', '');
            body.removeChild(container);
            NeonModalFactory.instance = null;
        })
    }
    var instance;
    return {
        getInstance: function(htmlstring, referrer){
            if (this.instance == null) {
                instance = new NeonModalClass(htmlstring, referrer);
                // Hide the constructor so the returned object can't be new'd...
                instance.constructor = null;
            } else {
                if( NEON_THEME_debug === true ){
                    console.log( 'Can\'t call a modal from inside a modal.');
                }
            }
            return instance;
        }
    };
    function prep_s3_video(content){
        //if video add autoplay
        let isvideo = content.getElementsByTagName('video');    
        if(isvideo.length ){
            let thevideo = isvideo[0];
            if(typeof thevideo !== 'undefined'){
                thevideo.autoplay = true;
                thevideo.play();
            }
        }

    }
    function prep_vimeo(content){
        let isiframe = content.getElementsByTagName('iframe');
        if(isiframe.length){
            let theframe = isiframe[0];
            if(typeof theframe !== 'undefined'){
                let width = Math.round( content.getBoundingClientRect().width * .8 ); // 9:16 aspect for height
                let height = Math.round( 9 * ( width / 16 ));
                theframe.height = height;
                theframe.width = width;
            }
        }
    }
})();